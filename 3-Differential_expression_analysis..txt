
##############  elncRNAs
##############  logFC estimate of the log2-fold-change corresponding to the effect or contrast (for topTableF there may be several columns of log-fold-changes)
##############  topTreat function used to adjust the p-values for multiple testing. A NULL value will result in the default adjustment method, which is "BH"



library(limma)
library(pheatmap)
setwd("/lncbrain/DiffExpressiom")
data1=read.table("elncRNAexpression" ,header = T)
myrows <-as.character(data1$null)
data <- as.matrix(data1[c(-0,-1)])
rownames(data) <- myrows



group_listCRBL<-read.table("gene_listCRBL.txt")
new_groupCRBL<- group_listCRBL[order(group_listCRBL[,1]),]
groupCRBL<-new_groupCRBL[,2]
designCRBL <- model.matrix(~0+factor(groupCRBL))
dataCRBL <- data
colnames(designCRBL)=levels(factor(groupCRBL))
rownames(designCRBL)=colnames(dataCRBL)

contrast.matrixCRBL<-makeContrasts("CRBL-other",levels=designCRBL)
fitCRBL <- lmFit(dataCRBL,designCRBL)
fitCRBL2 <- contrasts.fit(fitCRBL, contrast.matrixCRBL)
fitCRBL2 <- eBayes(fitCRBL2)
Summary <- summary(decideTests(fitCRBL2))

dtCRBL <- decideTests(fitCRBL2)
summary(dtCRBL)

colnames(fitCRBL2)
CRBLVSother<- topTreat(fitCRBL2, coef=1, n=Inf, adjust.method = "BH")
write.table(CRBLVSother,"CRBLVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)



group_listFCTX<-read.table("gene_listFCTX.txt")
new_groupFCTX<- group_listFCTX[order(group_listFCTX[,1]),]
groupFCTX<-new_groupFCTX[,2]
designFCTX <- model.matrix(~0+factor(groupFCTX))
dataFCTX <- data
colnames(designFCTX)=levels(factor(groupFCTX))
rownames(designFCTX)=colnames(dataFCTX)

contrast.matrixFCTX<-makeContrasts("FCTX-other",levels=designFCTX)
fitFCTX <- lmFit(dataFCTX,designFCTX)
fitFCTX2 <- contrasts.fit(fitFCTX, contrast.matrixFCTX)
fitFCTX2 <- eBayes(fitFCTX2)
Summary <- summary(decideTests(fitFCTX2))

dtFCTX <- decideTests(fitFCTX2)
summary(dtFCTX)

colnames(fitFCTX2)
FCTXVSother<- topTreat(fitFCTX2, coef=1, n=Inf)
write.table(FCTXVSother,"FCTXVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listHIPP<-read.table("gene_listHIPP.txt")
new_groupHIPP<- group_listHIPP[order(group_listHIPP[,1]),]
groupHIPP<-new_groupHIPP[,2]
designHIPP <- model.matrix(~0+factor(groupHIPP))
dataHIPP <- data
colnames(designHIPP)=levels(factor(groupHIPP))
rownames(designHIPP)=colnames(dataHIPP)

contrast.matrixHIPP<-makeContrasts("HIPP-other",levels=designHIPP)
fitHIPP <- lmFit(dataHIPP,designHIPP)
fitHIPP2 <- contrasts.fit(fitHIPP, contrast.matrixHIPP)
fitHIPP2 <- eBayes(fitHIPP2)
Summary <- summary(decideTests(fitHIPP2))

dtHIPP <- decideTests(fitHIPP2)
summary(dtHIPP)

colnames(fitHIPP2)
HIPPVSother<- topTreat(fitHIPP2, coef=1, n=Inf)
write.table(HIPPVSother,"HIPPVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listMEDU<-read.table("gene_listMEDU.txt")
new_groupMEDU<- group_listMEDU[order(group_listMEDU[,1]),]
groupMEDU<-new_groupMEDU[,2]
designMEDU <- model.matrix(~0+factor(groupMEDU))
dataMEDU <- data
colnames(designMEDU)=levels(factor(groupMEDU))
rownames(designMEDU)=colnames(dataMEDU)

contrast.matrixMEDU<-makeContrasts("MEDU-other",levels=designMEDU)
fitMEDU <- lmFit(dataMEDU,designMEDU)
fitMEDU2 <- contrasts.fit(fitMEDU, contrast.matrixMEDU)
fitMEDU2 <- eBayes(fitMEDU2)
Summary <- summary(decideTests(fitMEDU2))

dtMEDU <- decideTests(fitMEDU2)
summary(dtMEDU)

colnames(fitMEDU2)
MEDUVSother<- topTreat(fitMEDU2, coef=1, n=Inf)
write.table(MEDUVSother,"MEDUVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listOCTX<-read.table("gene_listOCTX.txt")
new_groupOCTX<- group_listOCTX[order(group_listOCTX[,1]),]
groupOCTX<-new_groupOCTX[,2]
designOCTX <- model.matrix(~0+factor(groupOCTX))
dataOCTX <- data
colnames(designOCTX)=levels(factor(groupOCTX))
rownames(designOCTX)=colnames(dataOCTX)

contrast.matrixOCTX<-makeContrasts("OCTX-other",levels=designOCTX)
fitOCTX <- lmFit(dataOCTX,designOCTX)
fitOCTX2 <- contrasts.fit(fitOCTX, contrast.matrixOCTX)
fitOCTX2 <- eBayes(fitOCTX2)
Summary <- summary(decideTests(fitOCTX2))

dtOCTX <- decideTests(fitOCTX2)
summary(dtOCTX)

colnames(fitOCTX2)
OCTXVSother<- topTreat(fitOCTX2, coef=1, n=Inf)
write.table(OCTXVSother,"OCTXVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listPUTM<-read.table("gene_listPUTM.txt")
new_groupPUTM<- group_listPUTM[order(group_listPUTM[,1]),]
groupPUTM<-new_groupPUTM[,2]
designPUTM <- model.matrix(~0+factor(groupPUTM))
dataPUTM <- data
colnames(designPUTM)=levels(factor(groupPUTM))
rownames(designPUTM)=colnames(dataPUTM)

contrast.matrixPUTM<-makeContrasts("PUTM-other",levels=designPUTM)
fitPUTM <- lmFit(dataPUTM,designPUTM)
fitPUTM2 <- contrasts.fit(fitPUTM, contrast.matrixPUTM)
fitPUTM2 <- eBayes(fitPUTM2)
Summary <- summary(decideTests(fitPUTM2))

dtPUTM <- decideTests(fitPUTM2)
summary(dtPUTM)

colnames(fitPUTM2)
PUTMVSother<- topTreat(fitPUTM2, coef=1, n=Inf)
write.table(PUTMVSother,"PUTMVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listSNIG<-read.table("gene_listSNIG.txt")
new_groupSNIG<- group_listSNIG[order(group_listSNIG[,1]),]
groupSNIG<-new_groupSNIG[,2]
designSNIG <- model.matrix(~0+factor(groupSNIG))
dataSNIG <- data
colnames(designSNIG)=levels(factor(groupSNIG))
rownames(designSNIG)=colnames(dataSNIG)

contrast.matrixSNIG<-makeContrasts("SNIG-other",levels=designSNIG)
fitSNIG <- lmFit(dataSNIG,designSNIG)
fitSNIG2 <- contrasts.fit(fitSNIG, contrast.matrixSNIG)
fitSNIG2 <- eBayes(fitSNIG2)
Summary <- summary(decideTests(fitSNIG2))

dtSNIG <- decideTests(fitSNIG2)
summary(dtSNIG)

colnames(fitSNIG2)
SNIGVSother<- topTreat(fitSNIG2, coef=1, n=Inf)
write.table(SNIGVSother,"SNIGVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listTCTX<-read.table("gene_listTCTX.txt")
new_groupTCTX<- group_listTCTX[order(group_listTCTX[,1]),]
groupTCTX<-new_groupTCTX[,2]
designTCTX <- model.matrix(~0+factor(groupTCTX))
dataTCTX <- data
colnames(designTCTX)=levels(factor(groupTCTX))
rownames(designTCTX)=colnames(dataTCTX)

contrast.matrixTCTX<-makeContrasts("TCTX-other",levels=designTCTX)
fitTCTX <- lmFit(dataTCTX,designTCTX)
fitTCTX2 <- contrasts.fit(fitTCTX, contrast.matrixTCTX)
fitTCTX2 <- eBayes(fitTCTX2)
Summary <- summary(decideTests(fitTCTX2))

dtTCTX <- decideTests(fitTCTX2)
summary(dtTCTX)

colnames(fitTCTX2)
TCTXVSother<- topTreat(fitTCTX2, coef=1, n=Inf)
write.table(TCTXVSother,"TCTXVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listTHAL<-read.table("gene_listTHAL.txt")
new_groupTHAL<- group_listTHAL[order(group_listTHAL[,1]),]
groupTHAL<-new_groupTHAL[,2]
designTHAL <- model.matrix(~0+factor(groupTHAL))
dataTHAL <- data
colnames(designTHAL)=levels(factor(groupTHAL))
rownames(designTHAL)=colnames(dataTHAL)

contrast.matrixTHAL<-makeContrasts("THAL-other",levels=designTHAL)
fitTHAL <- lmFit(dataTHAL,designTHAL)
fitTHAL2 <- contrasts.fit(fitTHAL, contrast.matrixTHAL)
fitTHAL2 <- eBayes(fitTHAL2)
Summary <- summary(decideTests(fitTHAL2))

dtTHAL <- decideTests(fitTHAL2)
summary(dtTHAL)

colnames(fitTHAL2)
THALVSother<- topTreat(fitTHAL2, coef=1, n=Inf)
write.table(THALVSother,"THALVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)


group_listWHMT<-read.table("gene_listWHMT.txt")
new_groupWHMT<- group_listWHMT[order(group_listWHMT[,1]),]
groupWHMT<-new_groupWHMT[,2]
designWHMT <- model.matrix(~0+factor(groupWHMT))
dataWHMT <- data
colnames(designWHMT)=levels(factor(groupWHMT))
rownames(designWHMT)=colnames(dataWHMT)

contrast.matrixWHMT<-makeContrasts("WHMT-other",levels=designWHMT)
fitWHMT <- lmFit(dataWHMT,designWHMT)
fitWHMT2 <- contrasts.fit(fitWHMT, contrast.matrixWHMT)
fitWHMT2 <- eBayes(fitWHMT2)
Summary <- summary(decideTests(fitWHMT2))

dtWHMT <- decideTests(fitWHMT2)
summary(dtWHMT)

colnames(fitWHMT2)
WHMTVSother<- topTreat(fitWHMT2, coef=1, n=Inf)
write.table(WHMTVSother,"WHMTVSother_elncRNAs.txt",sep = "\t",col.names = NA,quote=F)





############# The input file for generating a heatmap, using data processed outside of R, is "logFC_heatmap_DEelncRNAs.txt" £¨FC>1.5,adjustP<0.05)

logFC_heatmap=read.table("logFC_heatmap_DEelncRNAs.txt" ,header = T)

############### The heatmap clustering results are retrieved and the variables are stored

tmp<- pheatmap(logFC_heatmap,silent=T)

final_phe<- logFC_heatmap[tmp$tree_row$order,tmp$tree_col$order]


############### Cluster by Euclidean distance  clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean"

p1<-pheatmap(final_phe, clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", show_rownames = F, color = c(colorRampPalette(c('blue', 'white','red'))(100)), angle_col = 0)


############### Set font and size, serif is New Rome, [[4]] represents the horizontal axis

pp<-p1$gtable
pp$grobs[[4]]$gp=grid::gpar(fontfamily="serif", fontsize = 15)
plot(pp)

 









####################################################################################################################################### UpSetR

install.packages("UpSetR")
library(UpSetR) 
setwd("/lncbrain/DiffExpressiom")
sum10brain=read.table("UpSetRelncRNAs.txt" ,header = T)

upset(sum10brain, nsets = 10, nintersects = 45, mb.ratio = c(0.5, 0.5), order.by = c("freq", "degree"), decreasing = c(TRUE,FALSE))

### nsets: How many sets of data are displayed at most
### nintersects: Show how many intersections.
### mb.ratio: The ratio of dot plot and bar plot.
### order.by: How intersections are sorted. Here, first by freq, and then by degree
### decreasing: How variables are ordered. Here, freq is in descending order and degree is in ascending order








####################################################################################################################################### Jaccard similarity

CRBL<-c("ENSG00000122548","ENSG00000126005","ENSG00000131484","ENSG00000163597","ENSG00000166770","ENSG00000177234","ENSG00000181798","ENSG00000196295","ENSG00000196756","ENSG00000197934","ENSG00000204792","ENSG00000204929","ENSG00000205664","ENSG00000206573","ENSG00000211683","ENSG00000213742","ENSG00000214870","ENSG00000214922","ENSG00000215869","ENSG00000218510","ENSG00000224081","ENSG00000224318","ENSG00000224635","ENSG00000225194","ENSG00000225231","ENSG00000225315","ENSG00000225527","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227078","ENSG00000227165","ENSG00000227354","ENSG00000227676","ENSG00000228065","ENSG00000228139","ENSG00000228521","ENSG00000228886","ENSG00000229043","ENSG00000229195","ENSG00000229246","ENSG00000229278","ENSG00000229921","ENSG00000229989","ENSG00000230091","ENSG00000230223","ENSG00000230438","ENSG00000230704","ENSG00000230825","ENSG00000230912","ENSG00000231160","ENSG00000231335","ENSG00000231599","ENSG00000231889","ENSG00000232411","ENSG00000232886","ENSG00000233016","ENSG00000233184","ENSG00000233405","ENSG00000233542","ENSG00000235244","ENSG00000236427","ENSG00000236611","ENSG00000237128","ENSG00000237298","ENSG00000237750","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000239467","ENSG00000239922","ENSG00000240207","ENSG00000240661","ENSG00000241328","ENSG00000242021","ENSG00000243620","ENSG00000244558","ENSG00000244879","ENSG00000245832","ENSG00000246174","ENSG00000247828","ENSG00000248150","ENSG00000248174","ENSG00000248362","ENSG00000248429","ENSG00000248801","ENSG00000248936","ENSG00000250056","ENSG00000251164","ENSG00000251379","ENSG00000251455","ENSG00000251580","ENSG00000251603","ENSG00000253361","ENSG00000253716","ENSG00000254682","ENSG00000254731","ENSG00000254860","ENSG00000255449","ENSG00000255928","ENSG00000257176","ENSG00000257180","ENSG00000257241","ENSG00000257681","ENSG00000257815","ENSG00000257890","ENSG00000258302","ENSG00000258412","ENSG00000258766","ENSG00000258983","ENSG00000259520","ENSG00000259669","ENSG00000259712","ENSG00000260060","ENSG00000260260","ENSG00000260316","ENSG00000260317","ENSG00000260412","ENSG00000260671","ENSG00000260830","ENSG00000260835","ENSG00000261019","ENSG00000261098","ENSG00000261126","ENSG00000261613","ENSG00000261879","ENSG00000262155","ENSG00000262412","ENSG00000263603","ENSG00000263753","ENSG00000264575","ENSG00000265992","ENSG00000266900","ENSG00000267002","ENSG00000267454","ENSG00000268119","ENSG00000268555","ENSG00000268912","ENSG00000269416","ENSG00000269821","ENSG00000270015","ENSG00000270035","ENSG00000270127","ENSG00000270189","ENSG00000271335","ENSG00000271643","ENSG00000271916","ENSG00000272335","ENSG00000272375","ENSG00000272420","ENSG00000272541","ENSG00000272864","ENSG00000272871","ENSG00000272927","ENSG00000272977","ENSG00000273203","ENSG00000273240","ENSG00000273253","ENSG00000273301","ENSG00000273786","ENSG00000274031","ENSG00000275759","ENSG00000276399","ENSG00000277767","ENSG00000278576","ENSG00000278600","ENSG00000278727","ENSG00000278740","ENSG00000279066","ENSG00000281005","ENSG00000281501","ENSG00000281650")
FCTX<-c("ENSG00000126005","ENSG00000131484","ENSG00000166770","ENSG00000177112","ENSG00000181798","ENSG00000182366","ENSG00000189223","ENSG00000196756","ENSG00000197934","ENSG00000198468","ENSG00000204792","ENSG00000212978","ENSG00000214043","ENSG00000214870","ENSG00000215447","ENSG00000218510","ENSG00000223768","ENSG00000224848","ENSG00000225231","ENSG00000225393","ENSG00000225439","ENSG00000225470","ENSG00000226686","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227354","ENSG00000228065","ENSG00000228506","ENSG00000228793","ENSG00000228886","ENSG00000229043","ENSG00000229081","ENSG00000229152","ENSG00000229321","ENSG00000230074","ENSG00000230156","ENSG00000230438","ENSG00000230575","ENSG00000230658","ENSG00000230836","ENSG00000230839","ENSG00000231160","ENSG00000231769","ENSG00000232243","ENSG00000233184","ENSG00000234171","ENSG00000234492","ENSG00000236682","ENSG00000236882","ENSG00000237438","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000239467","ENSG00000240661","ENSG00000241231","ENSG00000241316","ENSG00000242588","ENSG00000244879","ENSG00000245832","ENSG00000246174","ENSG00000247828","ENSG00000248150","ENSG00000248174","ENSG00000248275","ENSG00000248429","ENSG00000249706","ENSG00000249877","ENSG00000250075","ENSG00000250241","ENSG00000251136","ENSG00000251372","ENSG00000251580","ENSG00000253496","ENSG00000254049","ENSG00000254377","ENSG00000254682","ENSG00000256427","ENSG00000257176","ENSG00000259774","ENSG00000259905","ENSG00000260372","ENSG00000260448","ENSG00000260671","ENSG00000260977","ENSG00000261037","ENSG00000261140","ENSG00000261402","ENSG00000261584","ENSG00000261621","ENSG00000261738","ENSG00000261879","ENSG00000263072","ENSG00000263164","ENSG00000263753","ENSG00000264808","ENSG00000266489","ENSG00000267454","ENSG00000268658","ENSG00000269696","ENSG00000269911","ENSG00000269937","ENSG00000270127","ENSG00000270157","ENSG00000271643","ENSG00000272282","ENSG00000272335","ENSG00000272375","ENSG00000272864","ENSG00000272865","ENSG00000272927","ENSG00000273240","ENSG00000273253","ENSG00000273492","ENSG00000273891","ENSG00000274031","ENSG00000275409","ENSG00000275759","ENSG00000276026","ENSG00000277767","ENSG00000277863","ENSG00000278576","ENSG00000281501","ENSG00000282464")
HIPP<-c("ENSG00000120664","ENSG00000131484","ENSG00000166770","ENSG00000173862","ENSG00000175611","ENSG00000177112","ENSG00000185904","ENSG00000189223","ENSG00000196295","ENSG00000196756","ENSG00000204792","ENSG00000212978","ENSG00000214888","ENSG00000215447","ENSG00000218672","ENSG00000223404","ENSG00000223768","ENSG00000223797","ENSG00000224382","ENSG00000224525","ENSG00000224848","ENSG00000225231","ENSG00000225470","ENSG00000225706","ENSG00000225914","ENSG00000226686","ENSG00000226752","ENSG00000226864","ENSG00000227354","ENSG00000228065","ENSG00000228408","ENSG00000228793","ENSG00000228886","ENSG00000229043","ENSG00000229081","ENSG00000229321","ENSG00000230156","ENSG00000230438","ENSG00000230658","ENSG00000230836","ENSG00000231160","ENSG00000231769","ENSG00000232243","ENSG00000233016","ENSG00000233184","ENSG00000234171","ENSG00000234625","ENSG00000235180","ENSG00000235448","ENSG00000236451","ENSG00000236837","ENSG00000237438","ENSG00000237667","ENSG00000237943","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000239467","ENSG00000240661","ENSG00000241231","ENSG00000241316","ENSG00000242072","ENSG00000244879","ENSG00000245498","ENSG00000245832","ENSG00000246174","ENSG00000246375","ENSG00000247572","ENSG00000247828","ENSG00000248174","ENSG00000248275","ENSG00000248429","ENSG00000251022","ENSG00000251372","ENSG00000251580","ENSG00000253716","ENSG00000253839","ENSG00000254081","ENSG00000254682","ENSG00000254860","ENSG00000255468","ENSG00000255692","ENSG00000255928","ENSG00000257845","ENSG00000259495","ENSG00000259774","ENSG00000260372","ENSG00000260398","ENSG00000261338","ENSG00000261584","ENSG00000261621","ENSG00000261879","ENSG00000263072","ENSG00000263164","ENSG00000263603","ENSG00000263753","ENSG00000263958","ENSG00000264808","ENSG00000266489","ENSG00000267079","ENSG00000267265","ENSG00000267366","ENSG00000270093","ENSG00000270127","ENSG00000271643","ENSG00000271727","ENSG00000271904","ENSG00000272106","ENSG00000272279","ENSG00000272375","ENSG00000272865","ENSG00000272927","ENSG00000272983","ENSG00000273253","ENSG00000273492","ENSG00000274031","ENSG00000275286","ENSG00000275409","ENSG00000275759","ENSG00000278576","ENSG00000278611","ENSG00000281501")
MEDU<-c("ENSG00000131484","ENSG00000166770","ENSG00000175611","ENSG00000189223","ENSG00000196295","ENSG00000196756","ENSG00000203875","ENSG00000204792","ENSG00000212978","ENSG00000215447","ENSG00000223768","ENSG00000225231","ENSG00000225470","ENSG00000226496","ENSG00000226686","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227354","ENSG00000228065","ENSG00000228408","ENSG00000228793","ENSG00000228886","ENSG00000229043","ENSG00000229321","ENSG00000229921","ENSG00000230438","ENSG00000230658","ENSG00000231160","ENSG00000231170","ENSG00000234171","ENSG00000234492","ENSG00000235448","ENSG00000235903","ENSG00000237438","ENSG00000237943","ENSG00000237975","ENSG00000239445","ENSG00000241316","ENSG00000244879","ENSG00000245498","ENSG00000245832","ENSG00000246174","ENSG00000246898","ENSG00000247828","ENSG00000248174","ENSG00000248275","ENSG00000248429","ENSG00000251372","ENSG00000251580","ENSG00000254049","ENSG00000254631","ENSG00000254682","ENSG00000254919","ENSG00000256422","ENSG00000256427","ENSG00000259495","ENSG00000259905","ENSG00000260372","ENSG00000260671","ENSG00000260760","ENSG00000261098","ENSG00000261621","ENSG00000261706","ENSG00000261879","ENSG00000263072","ENSG00000263753","ENSG00000266963","ENSG00000267040","ENSG00000270127","ENSG00000270154","ENSG00000271643","ENSG00000272143","ENSG00000272279","ENSG00000272814","ENSG00000272977","ENSG00000273492","ENSG00000274031","ENSG00000275759","ENSG00000278576","ENSG00000281501")
OCTX<-c("ENSG00000131484","ENSG00000166770","ENSG00000175611","ENSG00000177112","ENSG00000189223","ENSG00000196295","ENSG00000196756","ENSG00000197934","ENSG00000198468","ENSG00000204792","ENSG00000211683","ENSG00000214043","ENSG00000214870","ENSG00000215256","ENSG00000215447","ENSG00000218510","ENSG00000223768","ENSG00000224050","ENSG00000224635","ENSG00000224848","ENSG00000225231","ENSG00000226686","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227354","ENSG00000228065","ENSG00000229043","ENSG00000229081","ENSG00000229152","ENSG00000229195","ENSG00000229321","ENSG00000229437","ENSG00000229921","ENSG00000230156","ENSG00000230438","ENSG00000230658","ENSG00000230839","ENSG00000231013","ENSG00000231160","ENSG00000232411","ENSG00000233200","ENSG00000234171","ENSG00000234492","ENSG00000234626","ENSG00000235448","ENSG00000235903","ENSG00000237438","ENSG00000237667","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000239665","ENSG00000240207","ENSG00000240661","ENSG00000241231","ENSG00000241316","ENSG00000244879","ENSG00000245498","ENSG00000245832","ENSG00000246174","ENSG00000247572","ENSG00000247828","ENSG00000248150","ENSG00000248174","ENSG00000248275","ENSG00000248429","ENSG00000248828","ENSG00000249937","ENSG00000250241","ENSG00000251136","ENSG00000251372","ENSG00000251580","ENSG00000251600","ENSG00000254377","ENSG00000254682","ENSG00000255928","ENSG00000256427","ENSG00000259774","ENSG00000259994","ENSG00000260372","ENSG00000260671","ENSG00000260943","ENSG00000261188","ENSG00000261338","ENSG00000261402","ENSG00000261584","ENSG00000261613","ENSG00000261623","ENSG00000261879","ENSG00000262155","ENSG00000263164","ENSG00000263753","ENSG00000264808","ENSG00000266489","ENSG00000267212","ENSG00000267265","ENSG00000267454","ENSG00000267575","ENSG00000269696","ENSG00000270127","ENSG00000271643","ENSG00000272279","ENSG00000272375","ENSG00000272865","ENSG00000272927","ENSG00000272977","ENSG00000273240","ENSG00000273253","ENSG00000273301","ENSG00000273492","ENSG00000274031","ENSG00000275409","ENSG00000275601","ENSG00000275759","ENSG00000276007","ENSG00000277863","ENSG00000278576","ENSG00000281501")
PUTM<-c("ENSG00000175611","ENSG00000196295","ENSG00000196756","ENSG00000198468","ENSG00000204792","ENSG00000212978","ENSG00000218510","ENSG00000224635","ENSG00000225393","ENSG00000225706","ENSG00000225778","ENSG00000226686","ENSG00000226752","ENSG00000226864","ENSG00000228065","ENSG00000228203","ENSG00000228857","ENSG00000229043","ENSG00000229321","ENSG00000230156","ENSG00000230658","ENSG00000230836","ENSG00000231160","ENSG00000231769","ENSG00000234171","ENSG00000234405","ENSG00000234492","ENSG00000235448","ENSG00000236682","ENSG00000237438","ENSG00000237585","ENSG00000237720","ENSG00000237943","ENSG00000237975","ENSG00000239445","ENSG00000239911","ENSG00000240045","ENSG00000241231","ENSG00000241316","ENSG00000244879","ENSG00000245832","ENSG00000246174","ENSG00000247828","ENSG00000248174","ENSG00000248275","ENSG00000250241","ENSG00000251372","ENSG00000251580","ENSG00000253716","ENSG00000254049","ENSG00000254682","ENSG00000255857","ENSG00000258702","ENSG00000258744","ENSG00000259065","ENSG00000260160","ENSG00000260372","ENSG00000260671","ENSG00000260760","ENSG00000261098","ENSG00000261105","ENSG00000261402","ENSG00000261621","ENSG00000261879","ENSG00000263110","ENSG00000263753","ENSG00000266903","ENSG00000267454","ENSG00000269893","ENSG00000271643","ENSG00000272279","ENSG00000272375","ENSG00000272864","ENSG00000272865","ENSG00000273253","ENSG00000274031","ENSG00000274312","ENSG00000275759","ENSG00000277987")
SNIG<-c("ENSG00000126005","ENSG00000196295","ENSG00000198468","ENSG00000204110","ENSG00000204792","ENSG00000211683","ENSG00000223768","ENSG00000224382","ENSG00000224883","ENSG00000225180","ENSG00000226496","ENSG00000226686","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227354","ENSG00000228065","ENSG00000228408","ENSG00000229043","ENSG00000230438","ENSG00000230658","ENSG00000231160","ENSG00000231990","ENSG00000233016","ENSG00000234171","ENSG00000235448","ENSG00000237009","ENSG00000237152","ENSG00000237975","ENSG00000238012","ENSG00000239445","ENSG00000239467","ENSG00000241231","ENSG00000244879","ENSG00000245498","ENSG00000245832","ENSG00000246174","ENSG00000246375","ENSG00000247498","ENSG00000247828","ENSG00000248275","ENSG00000249252","ENSG00000251372","ENSG00000253496","ENSG00000254682","ENSG00000254919","ENSG00000256427","ENSG00000258779","ENSG00000259065","ENSG00000259219","ENSG00000259905","ENSG00000260032","ENSG00000261428","ENSG00000261584","ENSG00000261621","ENSG00000261879","ENSG00000263635","ENSG00000264808","ENSG00000268555","ENSG00000268658","ENSG00000270116","ENSG00000270127","ENSG00000271643","ENSG00000272865","ENSG00000273253","ENSG00000273492","ENSG00000274031","ENSG00000277301","ENSG00000278576","ENSG00000281501")
TCTX<-c("ENSG00000122548","ENSG00000131484","ENSG00000163364","ENSG00000166770","ENSG00000177112","ENSG00000177725","ENSG00000189223","ENSG00000196295","ENSG00000196756","ENSG00000204792","ENSG00000205663","ENSG00000212978","ENSG00000214043","ENSG00000214324","ENSG00000214870","ENSG00000215256","ENSG00000215447","ENSG00000218510","ENSG00000223768","ENSG00000224848","ENSG00000224945","ENSG00000225138","ENSG00000225230","ENSG00000226578","ENSG00000226686","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227165","ENSG00000227354","ENSG00000228065","ENSG00000228793","ENSG00000229043","ENSG00000229081","ENSG00000229152","ENSG00000229321","ENSG00000229996","ENSG00000230156","ENSG00000230438","ENSG00000230658","ENSG00000230836","ENSG00000231106","ENSG00000231160","ENSG00000231769","ENSG00000232243","ENSG00000232855","ENSG00000232876","ENSG00000233016","ENSG00000233184","ENSG00000234171","ENSG00000234492","ENSG00000234614","ENSG00000235448","ENSG00000237149","ENSG00000237438","ENSG00000237720","ENSG00000237943","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000239467","ENSG00000240207","ENSG00000240661","ENSG00000241231","ENSG00000242588","ENSG00000244879","ENSG00000245498","ENSG00000245832","ENSG00000246174","ENSG00000246375","ENSG00000247828","ENSG00000248150","ENSG00000248174","ENSG00000248429","ENSG00000248925","ENSG00000249937","ENSG00000250643","ENSG00000251136","ENSG00000251372","ENSG00000251575","ENSG00000251580","ENSG00000251600","ENSG00000253103","ENSG00000253361","ENSG00000254154","ENSG00000254377","ENSG00000254473","ENSG00000254631","ENSG00000254682","ENSG00000254860","ENSG00000255468","ENSG00000255928","ENSG00000256073","ENSG00000256427","ENSG00000257815","ENSG00000258702","ENSG00000259577","ENSG00000259774","ENSG00000259905","ENSG00000259994","ENSG00000260372","ENSG00000260398","ENSG00000260464","ENSG00000260671","ENSG00000260760","ENSG00000261037","ENSG00000261098","ENSG00000261105","ENSG00000261402","ENSG00000261613","ENSG00000261621","ENSG00000261879","ENSG00000263072","ENSG00000263082","ENSG00000263753","ENSG00000264247","ENSG00000264880","ENSG00000266489","ENSG00000266903","ENSG00000267454","ENSG00000268658","ENSG00000269696","ENSG00000270127","ENSG00000271643","ENSG00000271727","ENSG00000272274","ENSG00000272316","ENSG00000272375","ENSG00000272864","ENSG00000272865","ENSG00000272927","ENSG00000273253","ENSG00000273492","ENSG00000274031","ENSG00000275409","ENSG00000275759","ENSG00000278000","ENSG00000278600","ENSG00000278611","ENSG00000281501")
THAL<-c
WHMT<-c("ENSG00000131484","ENSG00000175611","ENSG00000189223","ENSG00000196295","ENSG00000203875","ENSG00000204792","ENSG00000212978","ENSG00000213468","ENSG00000215424","ENSG00000218672","ENSG00000223745","ENSG00000224848","ENSG00000225231","ENSG00000225554","ENSG00000226026","ENSG00000226496","ENSG00000226752","ENSG00000226824","ENSG00000226864","ENSG00000227354","ENSG00000227533","ENSG00000228065","ENSG00000228408","ENSG00000228793","ENSG00000228886","ENSG00000229043","ENSG00000229321","ENSG00000229921","ENSG00000230438","ENSG00000230658","ENSG00000230825","ENSG00000230836","ENSG00000230839","ENSG00000231160","ENSG00000231170","ENSG00000231713","ENSG00000232504","ENSG00000232638","ENSG00000232855","ENSG00000233016","ENSG00000233359","ENSG00000233527","ENSG00000233593","ENSG00000234171","ENSG00000234190","ENSG00000235180","ENSG00000235448","ENSG00000235903","ENSG00000236088","ENSG00000236107","ENSG00000236882","ENSG00000237152","ENSG00000237742","ENSG00000237943","ENSG00000237975","ENSG00000239335","ENSG00000239445","ENSG00000240661","ENSG00000241231","ENSG00000241316","ENSG00000241767","ENSG00000242588","ENSG00000244879","ENSG00000245768","ENSG00000245832","ENSG00000245937","ENSG00000246174","ENSG00000246375","ENSG00000246898","ENSG00000246982","ENSG00000247157","ENSG00000247572","ENSG00000247828","ENSG00000248275","ENSG00000248378","ENSG00000250538","ENSG00000251372","ENSG00000251504","ENSG00000251580","ENSG00000253716","ENSG00000254049","ENSG00000254081","ENSG00000254682","ENSG00000254860","ENSG00000255142","ENSG00000255389","ENSG00000256427","ENSG00000257176","ENSG00000259065","ENSG00000259126","ENSG00000259495","ENSG00000259891","ENSG00000259905","ENSG00000260244","ENSG00000260260","ENSG00000260372","ENSG00000260551","ENSG00000260657","ENSG00000260760","ENSG00000260780","ENSG00000261098","ENSG00000261584","ENSG00000261598","ENSG00000261613","ENSG00000261621","ENSG00000261706","ENSG00000261879","ENSG00000262223","ENSG00000263164","ENSG00000263753","ENSG00000264247","ENSG00000264808","ENSG00000264880","ENSG00000266489","ENSG00000268912","ENSG00000271324","ENSG00000271643","ENSG00000273253","ENSG00000274031","ENSG00000278576","ENSG00000278600","ENSG00000281501","ENSG00000281980","ENSG00000282142")

CRBLvsFCTX<-length(intersect(CRBL,FCTX))/length(union(CRBL,FCTX))
CRBLvsHIPP<-length(intersect(CRBL,HIPP))/length(union(CRBL,HIPP))
CRBLvsMEDU<-length(intersect(CRBL,MEDU))/length(union(CRBL,MEDU))
CRBLvsOCTX<-length(intersect(CRBL,OCTX))/length(union(CRBL,OCTX))
CRBLvsPUTM<-length(intersect(CRBL,PUTM))/length(union(CRBL,PUTM))
CRBLvsSNIG<-length(intersect(CRBL,SNIG))/length(union(CRBL,SNIG))
CRBLvsTCTX<-length(intersect(CRBL,TCTX))/length(union(CRBL,TCTX))
CRBLvsTHAL<-length(intersect(CRBL,THAL))/length(union(CRBL,THAL))
CRBLvsWHMT<-length(intersect(CRBL,WHMT))/length(union(CRBL,WHMT))
FCTXvsHIPP<-length(intersect(FCTX,HIPP))/length(union(FCTX,HIPP))
FCTXvsMEDU<-length(intersect(FCTX,MEDU))/length(union(FCTX,MEDU))
FCTXvsOCTX<-length(intersect(FCTX,OCTX))/length(union(FCTX,OCTX))
FCTXvsPUTM<-length(intersect(FCTX,PUTM))/length(union(FCTX,PUTM))
FCTXvsSNIG<-length(intersect(FCTX,SNIG))/length(union(FCTX,SNIG))
FCTXvsTCTX<-length(intersect(FCTX,TCTX))/length(union(FCTX,TCTX))
FCTXvsTHAL<-length(intersect(FCTX,THAL))/length(union(FCTX,THAL))
FCTXvsWHMT<-length(intersect(FCTX,WHMT))/length(union(FCTX,WHMT))
HIPPvsMEDU<-length(intersect(HIPP,MEDU))/length(union(HIPP,MEDU))
HIPPvsOCTX<-length(intersect(HIPP,OCTX))/length(union(HIPP,OCTX))
HIPPvsPUTM<-length(intersect(HIPP,PUTM))/length(union(HIPP,PUTM))
HIPPvsSNIG<-length(intersect(HIPP,SNIG))/length(union(HIPP,SNIG))
HIPPvsTCTX<-length(intersect(HIPP,TCTX))/length(union(HIPP,TCTX))
HIPPvsTHAL<-length(intersect(HIPP,THAL))/length(union(HIPP,THAL))
HIPPvsWHMT<-length(intersect(HIPP,WHMT))/length(union(HIPP,WHMT))
MEDUvsOCTX<-length(intersect(MEDU,OCTX))/length(union(MEDU,OCTX))
MEDUvsPUTM<-length(intersect(MEDU,PUTM))/length(union(MEDU,PUTM))
MEDUvsSNIG<-length(intersect(MEDU,SNIG))/length(union(MEDU,SNIG))
MEDUvsTCTX<-length(intersect(MEDU,TCTX))/length(union(MEDU,TCTX))
MEDUvsTHAL<-length(intersect(MEDU,THAL))/length(union(MEDU,THAL))
MEDUvsWHMT<-length(intersect(MEDU,WHMT))/length(union(MEDU,WHMT))
OCTXvsPUTM<-length(intersect(OCTX,PUTM))/length(union(OCTX,PUTM))
OCTXvsSNIG<-length(intersect(OCTX,SNIG))/length(union(OCTX,SNIG))
OCTXvsTCTX<-length(intersect(OCTX,TCTX))/length(union(OCTX,TCTX))
OCTXvsTHAL<-length(intersect(OCTX,THAL))/length(union(OCTX,THAL))
OCTXvsWHMT<-length(intersect(OCTX,WHMT))/length(union(OCTX,WHMT))
PUTMvsSNIG<-length(intersect(PUTM,SNIG))/length(union(PUTM,SNIG))
PUTMvsTCTX<-length(intersect(PUTM,TCTX))/length(union(PUTM,TCTX))
PUTMvsTHAL<-length(intersect(PUTM,THAL))/length(union(PUTM,THAL))
PUTMvsWHMT<-length(intersect(PUTM,WHMT))/length(union(PUTM,WHMT))
SNIGvsTCTX<-length(intersect(SNIG,TCTX))/length(union(SNIG,TCTX))
SNIGvsTHAL<-length(intersect(SNIG,THAL))/length(union(SNIG,THAL))
SNIGvsWHMT<-length(intersect(SNIG,WHMT))/length(union(SNIG,WHMT))
TCTXvsTHAL<-length(intersect(TCTX,THAL))/length(union(TCTX,THAL))
TCTXvsWHMT<-length(intersect(TCTX,WHMT))/length(union(TCTX,WHMT))
THALvsWHMT<-length(intersect(THAL,WHMT))/length(union(THAL,WHMT))



vs<-c(CRBLvsFCTX,CRBLvsHIPP,CRBLvsMEDU,CRBLvsOCTX,CRBLvsPUTM,CRBLvsSNIG,CRBLvsTCTX,CRBLvsTHAL,CRBLvsWHMT,FCTXvsHIPP,FCTXvsMEDU,FCTXvsOCTX,FCTXvsPUTM,FCTXvsSNIG,FCTXvsTCTX,FCTXvsTHAL,FCTXvsWHMT,HIPPvsMEDU,HIPPvsOCTX,HIPPvsPUTM,HIPPvsSNIG,HIPPvsTCTX,HIPPvsTHAL,HIPPvsWHMT,MEDUvsOCTX,MEDUvsPUTM,MEDUvsSNIG,MEDUvsTCTX,MEDUvsTHAL,MEDUvsWHMT,OCTXvsPUTM,OCTXvsSNIG,OCTXvsTCTX,OCTXvsTHAL,OCTXvsWHMT,PUTMvsSNIG,PUTMvsTCTX,PUTMvsTHAL,PUTMvsWHMT,SNIGvsTCTX,SNIGvsTHAL,SNIGvsWHMT,TCTXvsTHAL,TCTXvsWHMT,THALvsWHMT)
vs<-as.matrix(vs)
vsname<-c("CRBLvsFCTX","CRBLvsHIPP","CRBLvsMEDU","CRBLvsOCTX","CRBLvsPUTM","CRBLvsSNIG","CRBLvsTCTX","CRBLvsTHAL","CRBLvsWHMT","FCTXvsHIPP","FCTXvsMEDU","FCTXvsOCTX","FCTXvsPUTM","FCTXvsSNIG","FCTXvsTCTX","FCTXvsTHAL","FCTXvsWHMT","HIPPvsMEDU","HIPPvsOCTX","HIPPvsPUTM","HIPPvsSNIG","HIPPvsTCTX","HIPPvsTHAL","HIPPvsWHMT","MEDUvsOCTX","MEDUvsPUTM","MEDUvsSNIG","MEDUvsTCTX","MEDUvsTHAL","MEDUvsWHMT","OCTXvsPUTM","OCTXvsSNIG","OCTXvsTCTX","OCTXvsTHAL","OCTXvsWHMT","PUTMvsSNIG","PUTMvsTCTX","PUTMvsTHAL","PUTMvsWHMT","SNIGvsTCTX","SNIGvsTHAL","SNIGvsWHMT","TCTXvsTHAL","TCTXvsWHMT","THALvsWHMT")
rownames(vs)<-vsname

write.table(vs,"elncRNAvs.txt",sep = "\t",col.names = NA,quote=F)



Jaccard_heatmap <- read.table("Jaccard_heatmap.txt" ,header = T)
Jaccard_heatmap <- as.matrix(Jaccard_heatmap)
corrplot(Jaccard_heatmap, method = "circle", type= "upper", col = colorRampPalette(c("blue", "white", "red"))(100), col.lim = c(0.1,0.5))




###################################################################### Wilcoxon test was used to measure the difference in elncRNA function (quantitative features) between brain regions, and quantitative features were obtained from LnCompare.

setwd("/lncbrain/DiffExpressiom")


###############Normalized for functional characteristics (0-1)

library(scales)

lncompare_features <- read.table("lncompare_features_table_19_04_18.txt" ,header = T)

lncompare_features_normalized <- apply(lncompare_features, 2, function(col) {rescale(col, to = c(0, 1), na.rm = TRUE)})

write.table(lncompare_features_normalized,"lncompare_features_normalized.txt")

##############Analysis after normalization was used


CRBL <- read.table("normlncompare_CRBL.txt" ,header = T)
FCTX <- read.table("normlncompare_FCTX.txt" ,header = T)
HIPP <- read.table("normlncompare_HIPP.txt" ,header = T)
MEDU <- read.table("normlncompare_MEDU.txt" ,header = T)
OCTX <- read.table("normlncompare_OCTX.txt" ,header = T)
PUTM <- read.table("normlncompare_PUTM.txt" ,header = T)
SNIG <- read.table("normlncompare_SNIG.txt" ,header = T)
TCTX <- read.table("normlncompare_TCTX.txt" ,header = T)
THAL <- read.table("normlncompare_THAL.txt" ,header = T)
WHMT <- read.table("normlncompare_WHMT.txt" ,header = T)

firstbr <- c()
secondbr <- c()
feature <- c()
plist <- c()
br <- c("CRBL","FCTX","HIPP","MEDU","OCTX","PUTM","SNIG","TCTX","THAL","WHMT")
for (i in 1:9){
    for (j in (i+1):10){
        for (k in 1:76){
        p <- wilcox.test(get(br[i])[,k],get(br[j])[,k])[[3]]
        plist <- c(plist,p)
        firstbr <- c(firstbr,br[i])
        secondbr <- c(secondbr, br[j])
        feature <- c(feature, colnames(CRBL)[k])
        }
      }
    }




CRBLav <- colMeans(CRBL,na.rm = TRUE)
FCTXav <- colMeans(FCTX,na.rm = TRUE)
HIPPav <- colMeans(HIPP,na.rm = TRUE)
MEDUav <- colMeans(MEDU,na.rm = TRUE)
OCTXav <- colMeans(OCTX,na.rm = TRUE)
PUTMav <- colMeans(PUTM,na.rm = TRUE)
SNIGav <- colMeans(SNIG,na.rm = TRUE)
TCTXav <- colMeans(TCTX,na.rm = TRUE)
THALav <- colMeans(THAL,na.rm = TRUE)
WHMTav <- colMeans(WHMT,na.rm = TRUE)

CRBLer <- apply(CRBL, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
FCTXer <- apply(FCTX, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
HIPPer <- apply(HIPP, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
MEDUer <- apply(MEDU, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
OCTXer <- apply(OCTX, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
PUTMer <- apply(PUTM, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
SNIGer <- apply(SNIG, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
TCTXer <- apply(TCTX, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
THALer <- apply(THAL, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
WHMTer <- apply(WHMT, 2, function(col) {sd(col, na.rm = TRUE) / sqrt(sum(!is.na(col)))})
 
brav <- c("CRBLav","FCTXav","HIPPav","MEDUav","OCTXav","PUTMav","SNIGav","TCTXav","THALav","WHMTav")
brer <- c("CRBLer","FCTXer","HIPPer","MEDUer","OCTXer","PUTMer","SNIGer","TCTXer","THALer","WHMTer")

av1list <- c()
av2list <- c()
for (i in 1:9){
    for (j in (i+1):10){
        for (k in 1:76){
        av1 <- get(brav[[i]])[k]
        av2 <- get(brav[[j]])[k]
        av1list <- c(av1list,av1)
        av2list <- c(av2list,av2)
        }
      }
    }
    
er1list <- c()
er2list <- c()
for (i in 1:9){
    for (j in (i+1):10){
        for (k in 1:76){
        er1 <- get(brer[[i]])[k]
        er2 <- get(brer[[j]])[k]
        er1list <- c(er1list,er1)
        er2list <- c(er2list,er2)
        }
      }
    }   




####  qlist <- c()
####  for (i in seq(from = 1, to = 3420, by = 76)){
####    q <- p.adjust(plist[i:(i+75)], method = "BH")
####    qlist <- c(qlist,q)
####    }
#### 
####  results <- cbind(t(t(firstbr)),t(t(secondbr)),t(t(feature)),t(t(av1list)),t(t(av2list)),t(t(er1list)),t(t(er2list)),t(t(plist)),t(t(qlist)))
####  write.table(results,"lncompareresults.txt")


results <- cbind(t(t(firstbr)),t(t(secondbr)),t(t(feature)),t(t(av1list)),t(t(av2list)),t(t(er1list)),t(t(er2list)),t(t(plist)))
write.table(results,"lncompareresults.txt")





###################################################### Wilcoxon test was used to measure the difference of elncRNA and non-elncRNA mean expression and variance in each brain region (empirical P > 0.05 in each brain region).
#########################################################Wilcoxon test was used because these mean expressions were not normal

av<-read.table("/lncbrain/av_expression_nonANDelncRNA.txt", sep="\t", fill=TRUE,header = T)

wilcox.test(av[,1],av[,2])  #####CRBL
wilcox.test(av[,3],av[,4])  #####FCTX
wilcox.test(av[,5],av[,6])  #####HIPP
wilcox.test(av[,7],av[,8])  #####MEDU
wilcox.test(av[,9],av[,10])  #####OCTX
wilcox.test(av[,11],av[,12])  #####PUTM
wilcox.test(av[,13],av[,14])  #####SNIG
wilcox.test(av[,15],av[,16])  #####TCTX
wilcox.test(av[,17],av[,18])  #####THAL
wilcox.test(av[,19],av[,20])  #####WHMT


va<-read.table("/lncbrain/va_expression_nonANDelncRNA.txt", sep="\t", fill=TRUE,header = T)   

wilcox.test(va[,1],va[,2])  #####CRBL
wilcox.test(va[,3],va[,4])  #####FCTX
wilcox.test(va[,5],va[,6])  #####HIPP
wilcox.test(va[,7],va[,8])  #####MEDU
wilcox.test(va[,9],va[,10])  #####OCTX
wilcox.test(va[,11],va[,12])  #####PUTM
wilcox.test(va[,13],va[,14])  #####SNIG
wilcox.test(va[,15],va[,16])  #####TCTX
wilcox.test(va[,17],va[,18])  #####THAL
wilcox.test(va[,19],va[,20])  #####WHMT


################################# Drawing box plots (va)

boxplot(va,col = c("lightblue", "lightpink"),xaxt = "n")
middle_positions <- seq(1.5, ncol(va) - 0.5, by = 2)
par(cex.lab = 1.2, cex.axis = 1.2, cex.main = 1.4, family = "serif")
axis(1, at = middle_positions, labels = c("CRBL","FCTX","HIPP","MEDU","OCTX","PUTM","SNIG","TCTX","THAL","WHMT"))
legend("topright", legend = c("non-elncRNAs", "elncRNAs"), fill = rep(c("lightblue", "lightpink"), cex = 1.4))




################### Wilcoxon test is used to measure the difference in the variance of functional expression, and alternative = "less" or "greater" can be used according to the actual level, instead of double ends, such as

##########  firstbr <- c()
##########  secondbr <- c()
##########  feature <- c()
##########  plist <- c()
##########  br <- c("CRBL","FCTX","HIPP","MEDU","OCTX","PUTM","SNIG","TCTX","THAL","WHMT")
##########  
##########      for (j in 2:10){
##########          for (k in 1:76){
##########          p <- wilcox.test(CRBL[,k],get(br[j])[,k],alternative = "less")[[3]]
##########          plist <- c(plist,p)
##########          firstbr <- c(firstbr,"CRBL")
##########          secondbr <- c(secondbr, br[j])
##########          feature <- c(feature, colnames(CRBL)[k])
##########          }
##########        }
##########  
##########  
##########  
##########    qlist <- c()
##########   for (i in seq(from = 1, to = 684, by = 76)){
##########      q <- p.adjust(plist[i:(i+75)], method = "BH")
##########      qlist <- c(qlist,q)
##########      }
##########   
##########   resultsCRBLless <- cbind(t(t(firstbr)),t(t(secondbr)),t(t(feature)),t(t(plist)),t(t(qlist)))
##########   write.table(resultsCRBLless,"lncompareresultsCRBLless.txt")
##########  
##########  
##########  firstbr <- c()
##########  secondbr <- c()
##########  feature <- c()
##########  plist <- c()
##########  br <- c("CRBL","FCTX","HIPP","MEDU","OCTX","PUTM","SNIG","TCTX","THAL","WHMT")
##########  
##########      for (j in 2:10){
##########          for (k in 1:76){
##########          p <- wilcox.test(CRBL[,k],get(br[j])[,k],alternative = "greater")[[3]]
##########          plist <- c(plist,p)
##########          firstbr <- c(firstbr,"CRBL")
##########          secondbr <- c(secondbr, br[j])
##########          feature <- c(feature, colnames(CRBL)[k])
##########         }
##########       }



  qlist <- c()
 for (i in seq(from = 1, to = 684, by = 76)){
    q <- p.adjust(plist[i:(i+75)], method = "BH")
    qlist <- c(qlist,q)
    }
 
 resultsCRBLgreater <- cbind(t(t(firstbr)),t(t(secondbr)),t(t(feature)),t(t(plist)),t(t(qlist)))
 write.table(resultsCRBLgreater,"lncompareresultsCRBLgreater.txt")








##########################violin plot

########## For example, suppose your data frame is as follows


##################      variable  value
##################   1       Group A   2.1
##################   2       Group B   1.9
##################   3       Group A   3.5
##################   4       Group B   2.8
##################   5       Group A   2.9
##################   6       Group B   3.2
##################   7       Group A   1.8
##################   8       Group B   2.5
##################   9       Group A   2.3
##################   10      Group B   2.7


library(ggplot2)

# sample data
data <- data.frame(variable = rep(c("Group A", "Group B"), each = 5), value = c(2.1, 1.9, 3.5, 2.8, 2.9, 3.2, 1.8, 2.5, 2.3, 2.7))

# Draw the violin diagram and customize the theme
ggplot(data, aes(x = variable, y = value, fill = variable)) +
  geom_violin() +
  theme_minimal() +  
  theme(
    panel.background = element_rect(fill = "white"),  # Set the background to white
    panel.grid = element_blank()  # Hidden grid line
  )


#########  Box adding plot

ggplot(data, aes(x = variable, y = value, fill = variable)) +
  geom_violin(position = position_dodge(width = 0.8), width = 0.6) +
  geom_boxplot(position = position_dodge(width = 0.8), width = 0.05, outlier.shape = NA) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_blank()
  )


ggplot(data, aes(x = variable, y = value, fill = variable)) +
  geom_violin(position = position_dodge(width = 1.5), width = 0.8) +
  geom_boxplot(position = position_dodge(width = 0.8), width = 0.05) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_blank()
  )




